#!/usr/bin/env bash

# shellcheck disable=SC1090
#set -x

STATEFILE=${IMA_TEST_WORKDIR:-/var/lib/imatest}/.state

function logit()
{
  local output=$1
  shift

  if [ "${output}" == "-" ] || [ -z "${output}" ]; then
    echo "$@"
  else
    echo "$@" >> "${output}"
  fi

}

function bannerit()
{
  local output=$1

  if [ -z "$(type -p banner)" ]; then
    logit "$@"
  else
    shift
    if [ "${output}" == "-" ] || [ -z "${output}" ]; then
      banner "$@"
    else
      banner "$@" >> "${output}"
    fi
  fi
}

function run_testcase()
{
  local wrapper="$1"
  local testcase="$2"
  local output="$3"

  local rc

  if [ "${output}" == "-" ] || [ -z "${output}" ]; then
    ${wrapper:+./${wrapper}} ./"${testcase}"
    rc=$?
  else
    ${wrapper:+./${wrapper}} ./"${testcase}" >> "${output}" 2>&1
    rc=$?
  fi

  return $rc
} # run_testcase

function imatest()
{
  local statefile=$1
  local testcases=$2
  local logfile=$3

  local testcasedir
  local line=0 is_retry=0
  local testcases_lines
  local commandline rc
  local stats_pass=0 stats_fail=0 stats_skip=0

  testcases_lines=$(wc -l < "${testcases}")
  testcasedir=$(dirname "${testcases}")

  export SUCCESS=0
  export FAIL=1
  export SUCCESS_NEEDS_REBOOT=2
  export SKIP=3
  export RETRY_AFTER_REBOOT=4

  if [ -f "${statefile}" ]; then
    source "${statefile}"
  else
    logit "${logfile}" ""
    logit "${logfile}" "================================================================================="
    bannerit "${logfile}" "New test"
    logit "${logfile}" "$(date): Starting a new test run"
    if [ -r /sys/kernel/security/ima/policy ]; then
      logit "${logfile}" "---------------------------------------------------------------------------------"
      logit "${logfile}" "IMA policy on host:"
      logit "${logfile}" "$(cat /sys/kernel/security/ima/policy)"
    fi
  fi
  [ -z "$line" ] && line=0

  while :; do
    if [ "${line}" == "end" ] || \
       [ "${line}" -gt "${testcases_lines}" ]; then
      echo "line=end" > "${statefile}"
      break
    fi
    pushd "${testcasedir}" &>/dev/null || exit 1

    line=$((line + 1))
    echo "line=${line}" > "${statefile}"

    commandline=$(sed -n "${line}p" "${testcases}")
    if [ "${commandline:0:1}" != "#" ] && [ -n "$(echo "${commandline}" | tr -d " ")" ]; then
      local testcase testcase_dir wrapper

      wrapper=$(cut -d" " -f1 <<< "${commandline}")
      case "${wrapper}" in
      scripts/run-in-uml.sh)
        testcase=$(cut -d" " -f2 <<< "${commandline}")
        ;;
      *)
        testcase=${commandline}
        wrapper=""
        ;;
      esac

      testcase_dir=$(dirname "${testcase}")

      if [ -d "${testcase_dir}" ]; then
        logit "${logfile}" "---------------------------------------------------------------------------------"
        logit "${logfile}" "Running testcase ${testcase} on $(uname -sr)"

        run_testcase "${wrapper}" "${testcase}" "${logfile}"
        rc=$?

        logit "${logfile}" "Result from ${testcase}: $rc"

        case "$rc" in
        "${SUCCESS}")
          logit "${logfile}" "  Test completed successfully"
          stats_pass=$((stats_pass + 1))
          ;;
        "${SKIP}")
          logit "${logfile}" "  Skipping test"
          stats_skip=$((stats_skip + 1))
          ;;
        "${SUCCESS_NEEDS_REBOOT}")
          logit "${logfile}" "  Test completed successfully (trying next test before rebooting)"
          stats_pass=$((stats_pass + 1))
          ;;
        "${FAIL}")
          logit "${logfile}" "  Test failed."
          stats_fail=$((stats_fail + 1))
          ;;
        "${RETRY_AFTER_REBOOT}")
          if [ $is_retry -ne 0 ]; then
            logit "${logfile}" "  Not retrying test after reboot since this is already a retry."
          else
            logit "${logfile}" "  Retrying test after reboot"
            line=$((line-1))
            if [ ${line} -ge 0 ]; then
              echo "line=${line}" > "${statefile}"
            else
              rm -f "${statefile}"
            fi
            {
              echo "is_retry=1"
              echo "stats_fail=${stats_fail}"
              echo "stats_pass=${stats_pass}"
              echo "stats_skip=${stats_skip}"
            } >> "${statefile}"
            reboot
          fi
          ;;
        *) logit "${logfile}" ">>>>>>>>> Unhandled return code: ${rc}";;
        esac
      fi
      is_retry=0

    fi
    popd &>/dev/null || exit 1
  done

  logit "${logfile}" "================================================================================="
  logit "${logfile}" "Statistics:"
  logit "${logfile}" "Fail: ${stats_fail}"
  logit "${logfile}" "Pass: ${stats_pass}"
  logit "${logfile}" "Skip: ${stats_skip}"
  logit "${logfile}" "================================================================================="
}

function usage()
{
  cat <<_EOF_
Usage: $1 --testcases <testcases> --logfile <logfile>
The following options are supported:
--testcases <testcase>  : Run the given test cases
--logfile <logfile>     : Logfile for output of test case runs
--clear                 : Remove previous state
--help|-h               : Display this help screen and exit
_EOF_
}

function main()
{
  local statedir
  local testcases=""
  local clear=0

  statedir=$(dirname "${STATEFILE}")

  while [ $# -gt 0 ]; do
    case "$1" in
    --testcases) shift 1; testcases=$1;;
    --logfile) shift 1; logfile=$1;;
    --clear) clear=1;;
    --help) usage "$0"; exit 0;;
    *) echo "Unknown option: $1"; exit 1;;
    esac
    shift
  done

  if [ -z "${testcases}" ]; then
    echo "Error: Missing testcases file."
    exit 1
  fi

  if [ ! -r "${testcases}" ]; then
    echo "Error: Cannot read testcases file ${testcases}."
    exit 1
  fi

  if ! mkdir -p "${statedir}"; then
    echo "Error: Could not create statefile dir ${statedir}."
    exit 1
  fi

  if [ $clear -ne 0 ]; then
    rm -f "${STATEFILE}"
  fi

  imatest "${STATEFILE}" "${testcases}" "${logfile}"
}

main "$@"
